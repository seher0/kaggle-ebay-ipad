q()
library(plyr)
library(ggplot2)
library(lubridate)
packages.install('plyr')
install.packages('plyr')
install.packages('ggplot2','lubridate')
install.packages('lubridate')
library(plyr)
library(ggplot2)
library(lubridate)
install.packages('ggplot2')
x=c(1,2,3)
barplot(x)
abline(h=mean(x))
install.packages('reshape')
r < rock
r <- rock
png( 'rock.png', width=500, height=500 )
plot(r)
dev.off()
View(r)
View(r)
plot(r)
lmfit <- lm( perm ~ area + peri, data=rock )
plot(lmfit)
q()
require(plyr)
con = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))
con = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))
con = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))
zz <- gzfile('sit.gz')
zz
zz <- gzfile('sit.gz', 'r')
files.list()
list.files()
zz <- gzfile('WS/play/R/sit.gz', 'r')
source(zz)
cohorts
cohort_p as.numeric(df$active_m0/df$signed_up), as.numeric(df$active_m1/df$signed_up), as.numeric(df$active_m2/df$signed_up),
as.numeric(df$active_m3/df$signed_up), as.numeric(df$active_m4/df$signed_up), as.numeric(df$active_m5/df$signed_up),
as.numeric(df$active_m6/df$signed_up), as.numeric(df$active_m7/df$signed_up), as.numeric(df$active_m8/df$signed_up) ))
source(zz)
zz <- gzfile('WS/play/R/sit.gz', 'r')
source(zz)
close(zz)
cohorts
ls()
rm(list=ls())
data <- read.csv('WS/data/cohort.csv')
data <- read.csv('WS/data/cohort.csv')
data
data$date = as.Date(data$date)
data
monthly_average = ddply(data,~date,summarise, avg_revenue=mean(revenue), customers = length(unique(company_name)))
monthly_average = ddply(data,~date,summarise, avg_revenue=mean(revenue), customers = length(unique(company)))
help(ddply)
monthly_average
ggplot(monthly_average, aes(x=date, y=avg_revenue)) + geom_line() + labs(title = "Average revenue by Calendar Month for Customers in $", x="Year", y="Average revenue ($)")
library('ggplot2')
ggplot(monthly_average, aes(x=date, y=avg_revenue)) + geom_line() + labs(title = "Average revenue by Calendar Month for Customers in $", x="Year", y="Average revenue ($)")
cohort = ddply(data,~company,summarise,cohort=min(date), avg_revenue=mean(revenue), num_months_as_customer = as.numeric(round((as.Date(format(Sys.time(), "%Y-%m-%d")) - min(date))/(365.25/12)) + 1))
cohort
ggplot('cohort')
help('ymd')
library(lubridate)
help('ymd')
title: "test"
title: "Pragmatic JS TC"
x = c(2,7,5)
x
y = seq (from=4, length=3, by=3)
y
x + y
x * y
x[2]
y[3]
x[2:3]
x = runif(50)
x
y = rnorm(50)
y
plot(x,y)
hist(y)
sd(c(5,8,12))
which.min(c(4,1,6))
library(dplyr)
install.package("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(hflights)
install.packages("hflights")
library(hflights)
hflights::
data(hflights)
head(hflights)
hflights = tbl_df(hflights)
flights
flights = hflights
flights[flights$Month == 1 & flights$DayofMonth == 1]
flights[flights$Month == 1 & flights$DayofMonth == 1,]
flights[flights$Month == 1 & flights$DayofMonth == 1,]
filter(flights, UniqueCarrier == "AA")
setwd("~/WS/play/ML_DATA/analytic-course/kaggle")
convert.magic <- function(obj, type){
FUN1 <- switch(type,
character = as.character,
numeric = as.numeric,
factor = as.factor)
out <- lapply(obj, FUN1)
as.data.frame(out)
}
extractFeatures <- function(data) {
character_cols <- names(Filter(function(x) x=="character", sapply(data, class)))
for (col in character_cols) {
data[,col] <- as.factor(data[,col])
}
return(data)
}
#train_x <- subset(train, select = -c(Id, Hazard))
#train_x <- sparse.model.matrix(~., data = train_x)
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
cols.num <- c("condition", "cellular", "carrier", "color", "storage", "productline", "sold")
eBayTrain[,cols.num] <- convert.magic(eBayTrain[,cols.num], "factor")
cols.num2 <- c("condition", "cellular", "carrier", "color", "storage", "productline")
eBayTest[,cols.num2] <- convert.magic(eBayTest[,cols.num2], "factor")
levels(eBayTest$condition) <- levels(eBayTrain$condition)
levels(eBayTest$cellular) <- levels(eBayTrain$cellular)
levels(eBayTest$carrier) <- levels(eBayTrain$carrier)
levels(eBayTest$color) <- levels(eBayTrain$color)
levels(eBayTest$storage) <- levels(eBayTrain$storage)
levels(eBayTest$productline) <- levels(eBayTrain$productline)
str(eBayTrain)
table(eBayTrain$productline)
cor(eBayTrain$productline,eBayTrain$sold)
convert.magic <- function(obj, type){
FUN1 <- switch(type,
character = as.character,
numeric = as.numeric,
factor = as.factor)
out <- lapply(obj, FUN1)
as.data.frame(out)
}
extractFeatures <- function(data) {
character_cols <- names(Filter(function(x) x=="character", sapply(data, class)))
for (col in character_cols) {
data[,col] <- as.factor(data[,col])
}
return(data)
}
#train_x <- subset(train, select = -c(Id, Hazard))
#train_x <- sparse.model.matrix(~., data = train_x)
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
cols.num <- c("condition", "cellular", "carrier", "color", "storage", "productline", "sold")
eBayTrain[,cols.num] <- convert.magic(eBayTrain[,cols.num], "factor")
eBayTrain[,cols.num] <- convert.magic(eBayTrain[,cols.num], "numeric")
cols.num2 <- c("condition", "cellular", "carrier", "color", "storage", "productline")
eBayTest[,cols.num2] <- convert.magic(eBayTest[,cols.num2], "factor")
eBayTest[,cols.num2] <- convert.magic(eBayTest[,cols.num2], "numeric")
levels(eBayTest$condition) <- levels(eBayTrain$condition)
levels(eBayTest$cellular) <- levels(eBayTrain$cellular)
levels(eBayTest$carrier) <- levels(eBayTrain$carrier)
levels(eBayTest$color) <- levels(eBayTrain$color)
levels(eBayTest$storage) <- levels(eBayTrain$storage)
levels(eBayTest$productline) <- levels(eBayTrain$productline)
str(eBayTrain)
str(eBayTest)
convert.magic <- function(obj, type){
FUN1 <- switch(type,
character = as.character,
numeric = as.numeric,
factor = as.factor)
out <- lapply(obj, FUN1)
as.data.frame(out)
}
extractFeatures <- function(data) {
character_cols <- names(Filter(function(x) x=="character", sapply(data, class)))
for (col in character_cols) {
data[,col] <- as.factor(data[,col])
}
return(data)
}
#train_x <- subset(train, select = -c(Id, Hazard))
#train_x <- sparse.model.matrix(~., data = train_x)
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
cols.num <- c("condition", "cellular", "carrier", "color", "storage", "productline", "sold")
cols.num2 <- c("condition", "cellular", "carrier", "color", "storage", "productline")
eBayTrain[,cols.num] <- convert.magic(eBayTrain[,cols.num], "factor")
eBayTrain[,cols.num] <- convert.magic(eBayTrain[,cols.num2], "numeric")
eBayTest[,cols.num2] <- convert.magic(eBayTest[,cols.num2], "factor")
eBayTest[,cols.num2] <- convert.magic(eBayTest[,cols.num2], "numeric")
levels(eBayTest$condition) <- levels(eBayTrain$condition)
levels(eBayTest$cellular) <- levels(eBayTrain$cellular)
levels(eBayTest$carrier) <- levels(eBayTrain$carrier)
levels(eBayTest$color) <- levels(eBayTrain$color)
levels(eBayTest$storage) <- levels(eBayTrain$storage)
levels(eBayTest$productline) <- levels(eBayTrain$productline)
str(eBayTrain)
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
cols.num <- c("condition", "cellular", "carrier", "color", "storage", "productline", "sold")
cols.num2 <- c("condition", "cellular", "carrier", "color", "storage", "productline")
str(eBayTrain)
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
cols.num2 <- c("condition", "cellular", "carrier", "color", "storage", "productline")
str(eBayTrain)
eBayTrain[,cols.num] <- convert.magic(eBayTrain[,cols.num], "factor")
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
eBayTrain[,cols.num] <- convert.magic(eBayTrain[,cols.num2], "factor")
convert.magic <- function(obj, type){
FUN1 <- switch(type,
character = as.character,
numeric = as.numeric,
factor = as.factor)
out <- lapply(obj, FUN1)
as.data.frame(out)
}
extractFeatures <- function(data) {
character_cols <- names(Filter(function(x) x=="character", sapply(data, class)))
for (col in character_cols) {
data[,col] <- as.factor(data[,col])
}
return(data)
}
#train_x <- subset(train, select = -c(Id, Hazard))
#train_x <- sparse.model.matrix(~., data = train_x)
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
cols.num2 <- c("condition", "cellular", "carrier", "color", "storage", "productline")
eBayTrain[,cols.num2] <- convert.magic(eBayTrain[,cols.num2], "factor")
eBayTest[,cols.num2] <- convert.magic(eBayTest[,cols.num2], "factor")
levels(eBayTest$condition) <- levels(eBayTrain$condition)
levels(eBayTest$cellular) <- levels(eBayTrain$cellular)
levels(eBayTest$carrier) <- levels(eBayTrain$carrier)
levels(eBayTest$color) <- levels(eBayTrain$color)
levels(eBayTest$storage) <- levels(eBayTrain$storage)
levels(eBayTest$productline) <- levels(eBayTrain$productline)
eBayTrain[,cols.num2] <- convert.magic(eBayTrain[,cols.num2], "numeric")
eBayTest[,cols.num2] <- convert.magic(eBayTest[,cols.num2], "numeric")
str(eBayTrain)
str(eBayTest)
mrf3 = randomForest(sold ~ ., data=train1, ntree=300)
library(randomForest)
mrf3 = randomForest(sold ~ ., data=train1, ntree=300)
mrf3 = randomForest(sold ~ ., data=eBayTrain, ntree=300)
str(eBayTrain)
str(eBayTest)
library(tm)
library(data.table)
CorpusDescription = Corpus(VectorSource(c(eBayTrain$description, eBayTest$description)))
CorpusDescription = tm_map(CorpusDescription, content_transformer(tolower), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, PlainTextDocument, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removePunctuation, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removeWords, c("100", "the", stopwords("english")), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, stemDocument, lazy=TRUE)
CorpusDescription = tm_map (CorpusDescription, removeWords, c("the", "this", "like", "doe", "devic"))
dtm = DocumentTermMatrix(CorpusDescription)
sparse = removeSparseTerms(dtm, 0.98)
DescriptionWords = as.data.frame(as.matrix(sparse))
setnames(DescriptionWords, "condition", "acondition")
str(DescriptionWords)
colnames(DescriptionWords) = make.names(colnames(DescriptionWords))
wordsTrain <- DescriptionWords[1:1861,]
wordsTest <- DescriptionWords[1862:2659,]
train1 <- cbind(eBayTrain,wordsTrain)
test1 <- cbind(eBayTest,wordsTest)
train1$description <- NULL
test1$description <- NULL
train1$UniqueID <- NULL
test1$UniqueID <- NULL
library(randomForest)
mrf3 = randomForest(sold ~ ., data=eBayTrain, ntree=300)
mrf3 = randomForest(sold ~ ., data=train1, ntree=300)
convert.magic <- function(obj, type){
FUN1 <- switch(type,
character = as.character,
numeric = as.numeric,
factor = as.factor)
out <- lapply(obj, FUN1)
as.data.frame(out)
}
extractFeatures <- function(data) {
character_cols <- names(Filter(function(x) x=="character", sapply(data, class)))
for (col in character_cols) {
data[,col] <- as.factor(data[,col])
}
return(data)
}
#train_x <- subset(train, select = -c(Id, Hazard))
#train_x <- sparse.model.matrix(~., data = train_x)
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
cols.num <- c("condition", "cellular", "carrier", "color", "storage", "productline", "sold")
cols.num2 <- c("condition", "cellular", "carrier", "color", "storage", "productline")
eBayTrain[,cols.num] <- convert.magic(eBayTrain[,cols.num], "factor")
eBayTest[,cols.num2] <- convert.magic(eBayTest[,cols.num2], "factor")
levels(eBayTest$condition) <- levels(eBayTrain$condition)
levels(eBayTest$cellular) <- levels(eBayTrain$cellular)
levels(eBayTest$carrier) <- levels(eBayTrain$carrier)
levels(eBayTest$color) <- levels(eBayTrain$color)
levels(eBayTest$storage) <- levels(eBayTrain$storage)
levels(eBayTest$productline) <- levels(eBayTrain$productline)
eBayTrain[,cols.num2] <- convert.magic(eBayTrain[,cols.num2], "numeric")
eBayTest[,cols.num2] <- convert.magic(eBayTest[,cols.num2], "numeric")
str(eBayTrain)
str(eBayTest)
library(tm)
library(data.table)
CorpusDescription = Corpus(VectorSource(c(eBayTrain$description, eBayTest$description)))
CorpusDescription = tm_map(CorpusDescription, content_transformer(tolower), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, PlainTextDocument, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removePunctuation, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removeWords, c("100", "the", stopwords("english")), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, stemDocument, lazy=TRUE)
CorpusDescription = tm_map (CorpusDescription, removeWords, c("the", "this", "like", "doe", "devic"))
dtm = DocumentTermMatrix(CorpusDescription)
sparse = removeSparseTerms(dtm, 0.98)
DescriptionWords = as.data.frame(as.matrix(sparse))
setnames(DescriptionWords, "condition", "acondition")
str(DescriptionWords)
colnames(DescriptionWords) = make.names(colnames(DescriptionWords))
wordsTrain <- DescriptionWords[1:1861,]
wordsTest <- DescriptionWords[1862:2659,]
train1 <- cbind(eBayTrain,wordsTrain)
test1 <- cbind(eBayTest,wordsTest)
train1$description <- NULL
test1$description <- NULL
train1$UniqueID <- NULL
test1$UniqueID <- NULL
str(train1)
str(test1)
library(randomForest)
mrf3 = randomForest(sold ~ ., data=train1, ntree=300)
plot(mrf3)
predictRFtrain1 = predict(mrf3, newdata=train1)
table(train1$sold, predictRFtrain1)
library(caret)
preproc = preProcess(train1)
str(train1)
train2 = train1
train2$sold <- NULL
preproc = preProcess(train1)
train2 = train1
train2$sold <- NULL
preproc = preProcess(train2)
normTrain = predict(preproc, train2)
normTest = predict(preproc, test1)
distances = dist(normTrain, method="euclidean")
aHC = hclust(distances, method="ward.D")
plot(aHC)
hierGroups = cutree(aHC, k = 5)
table(hierGroups)
km = kmeans(normTrain, centers = 5)
table(km$cluster)
km$size
lapply(split(normTrain, hierGroups), colMeans)
HierCluster = split(normTrain, hierGroups)
plot(HierCluster)
mrf3 = randomForest(sold ~ ., data=train1, ntree=300)
predictRFtrain1 = predict(mrf3, newdata=train1)
table(train1$sold, predictRFtrain1)
PredTest = predictRFtest
MySubmission = data.frame(UniqueID = eBayTest$UniqueID, Probability1 = PredTest)
PredTest = predictRFtest
MySubmission = data.frame(UniqueID = eBayTest$UniqueID, Probability1 = PredTest)
predictRFtest = predict(mrf3, newdata=test1, type="prob")[,2]
PredTest = predictRFtest
MySubmission = data.frame(UniqueID = eBayTest$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "SubmissionSimpleLog.csv", row.names=FALSE)
